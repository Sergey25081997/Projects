# Домашнее задание 19

# Код, представленный в main3.py оформить в виде функций. Спроектировать и релизовать меню выбора действий:
# Создать таблицу
# Удалить таблицу
# Вставить запись
# Вывести все записи
# Разработать собственную таблицу на свободную тему для вашей программы, на замену student из main3.py

from sqlite3 import connect  # импортируем функцию для подключения к SQLite базе данных

# Подключаемся к базе данных (если файла базы данных нет — он создастся автоматически)
con = connect("library.sqlite3")

# Создаем объект курсора, с помощью которого выполняются SQL-запросы
cu = con.cursor()

# Удаляем таблицу books, если она существует, чтобы не было дубликатов
cu.execute("DROP TABLE IF EXISTS books")
con.commit()

# SQL-команда: создать таблицу books с полями id, title, author, year
CREATE_TABLE_COMMAND = """
CREATE TABLE IF NOT EXISTS books(
    id INTEGER PRIMARY KEY,  -- уникальный идентификатор книги, автоинкремент
    title TEXT,              -- название книги
    author TEXT,             -- автор книги
    year INTEGER             -- год издания
)
"""
# Выполняем команду создания таблицы
cu.execute(CREATE_TABLE_COMMAND)

# Команда для удаления таблицы 
# DELETE_COMMAND = "DROP TABLE books"
# cu.execute(DELETE_COMMAND)
# con.commit()

# SQL-команда для вставки новой записи в таблицу books (без указания id)
INSERT_COMMAND = """
INSERT INTO books (title, author, year)
VALUES (?, ?, ?)  -- значения подставляются из Python-кортежа
"""

# Данные книг которые хотим добавить в таблицу books
books_to_insert = [
    ("Война и мир", "Лев Толстой", 1869),
    ("Преступление и наказание", "Федор Достоевский", 1866),
    ("Мастер и Маргарита", "Михаил Булгаков", 1967),
    ("Анна Каренина", "Лев Толстой", 1877),
    ("Сто лет одиночества", "Габриэль Гарсиа Маркес", 1967),
    ("Убить пересмешника", "Харпер Ли", 1960),
    ("1984", "Джордж Оруэлл", 1949),
    ("Гордость и предубеждение", "Джейн Остин", 1813),
    ("Гамлет", "Уильям Шекспир", 1603),
    ("Братья Карамазовы", "Федор Достоевский", 1880),
]

# Оборачиваем вставку в try-except для обработки ошибок (например, дублирование ключа)
try:
    cu.executemany(INSERT_COMMAND, books_to_insert)  # вставляем несколько записей сразу
    con.commit()  # фиксируем изменения в базе данных
except Exception as e:
    print("Ошибка при вставке:", e)

# SQL-команда — выбрать все поля из таблицы books
READ_COMMAND = """
SELECT id, title, author, year
FROM books
"""
# Выполняем команду выборки
# cu.execute(READ_COMMAND)

# Получаем и выводим все записи сразу списком
# print("Все записи таблицы books:", cu.fetchall())

# Выполняем команду, если хотим читать построчно в цикле
cu.execute(READ_COMMAND)

# Цикл чтения по одной записи за раз
while True:
    row = cu.fetchone()  # получаем следующую запись
    if not row:  # если записей больше нет, выходим из цикла
        break
    print(row)  # выводим запись

# Закрываем соединение с базой
con.close()